spring:
  sql:
    init:
      mode: never # 스크립트를 실행하지 않음
      #continue-on-error: true # 이미 존재하는 테이블이 있어도 계속 실행
      schema-locations: classpath:schema-quartz.sql
  main:
    # Spring Framework 5.*에서 같은 이름의 빈을 등록할 때 발생하는 BeanDefinitionOverrideException 방지
    allow-bean-definition-overriding: true
  output:
    ansi:
      enabled: never   # ANSI 색상 끄기, Eclipse 콘솔의 ANSI Support 체크박스 끄기
  batch:
    job:
      enabled: false # 애플리케이션 시작 시 배치 잡 자동 실행 방지
  profiles:
    active: local
  datasource:
    # 스테이징 MySQL (주 데이터베이스)
    migstg-mysql:
      driver-class-name: com.mysql.cj.jdbc.Driver
      url: jdbc:mysql://localhost:3306/migstg?useSSL=false&serverTimezone=Asia/Seoul
      username: miguser
      password: mig!1234

    # 운영 서버 MySQL
    egovlocal-mysql:
      driver-class-name: com.mysql.cj.jdbc.Driver
      url: jdbc:mysql://localhost:3306/egovlocal?useSSL=false&serverTimezone=Asia/Seoul
      username: miguser
      password: mig!1234

    # 원격1 MySQL
    egovremote1-mysql:
      driver-class-name: com.mysql.cj.jdbc.Driver
      url: jdbc:mysql://localhost:3306/egovremote1?useSSL=false&serverTimezone=Asia/Seoul
      username: readuser
      password: read!1234

    # 원격1 CUBRID
    egovremote1-cubrid:
      driver-class-name: cubrid.jdbc.driver.CUBRIDDriver
      url: "jdbc:cubrid:localhost:33000:egovremote1:::"
      username: readuser
      password: read!1234

  quartz:
    jdbc:
      initialize-schema: never  # Quartz 스키마를 자동 초기화하지 않음

logging:
  level:
    org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping: trace # 요청 매핑 로그 상세 출력
  # 기존 로그 레벨 설정을 주석 처리하여 log4j2 설정만 사용하도록 함
  # level:
  #   '[org.egovframe]': DEBUG
  #   '[egovframework]': DEBUG
  #   '[org.springframework]': DEBUG
  #   root: DEBUG
  # POM.xml에서 활성 프로파일에 따라 log4j2.xml파일을 루트 폴더로 복사하고 있음
  config: classpath:log4j2.xml

erp:
  # ERP 시스템 API URL
  api-url: http://127.0.0.1:8080/api/v1/vehicles
  # ERP 시스템으로 데이터를 전송할 때 사용할 URL
  outbound-api-url: http://127.0.0.1:8080/api/v1/vehicles

#scheduler.jobs 주입 위치: BatchSchedulerConfig의 jobs 필드
#scheduler.jobs 사용 위치: BatchSchedulerConfig의 schedulerFactoryBean에서 JobDetail·Trigger 생성 및 등록, JobChainingJobListener에서 잡 체인 설정
scheduler:
  jobs:
    # CronTrigger로 즉시 스케줄됨
    insaRemote1ToStgJob: "0 * * * * ?"
    # CronTrigger로 즉시 스케줄됨
    erpRestToStgJob: "0 0/5 * * * ?"
    # CronTrigger로 즉시 스케줄됨
    erpStgToRestJob: "0 0 * * * ?"
    # CronTrigger로 즉시 스케줄됨
    mybatisToMybatisSampleJob: "0 0 * * * ?"
    # 선행 잡 종료 후 체인으로 실행됨
    insaStgToLocalJob: ""
    # 선행 잡 종료 후 체인으로 실행됨
    erpStgToLocalJob: ""

