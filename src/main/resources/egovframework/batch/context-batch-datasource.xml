<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
			http://www.springframework.org/schema/jdbc  http://www.springframework.org/schema/jdbc/spring-jdbc-4.0.xsd">


    <!-- globals.properties와 application.yml을 함께 로딩 -->
    <bean id="yamlProperties" class="org.springframework.beans.factory.config.YamlPropertiesFactoryBean">
        <property name="resources" value="classpath:application.yml" />
    </bean>
    <context:property-placeholder
            location="classpath:/egovframework/batch/properties/globals.properties"
            properties-ref="yamlProperties"/>

 	
	<!-- 운영 MySQL용 데이타소스 -->
    <bean id="dataSource-local" class="org.apache.commons.dbcp2.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${Globals.Local.DriverClassName}"/>
        <property name="url" value="${Globals.Local.Url}" />
        <property name="username" value="${Globals.Local.UserName}"/>
        <property name="password" value="${Globals.Local.Password}"/>
    </bean>

    <!-- 스테이징 MySQL (Primary) 데이타소스 -->
    <bean id="dataSource-stg" class="org.apache.commons.dbcp2.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${Globals.Stg.DriverClassName}"/>
        <property name="url" value="${Globals.Stg.Url}" />
        <property name="username" value="${Globals.Stg.UserName}"/>
        <property name="password" value="${Globals.Stg.Password}"/>
    </bean>

    <!-- Remote1 MySQL 데이타소스 -->
    <bean id="dataSource-remote1" class="org.apache.commons.dbcp2.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${Globals.Remote1.DriverClassName}"/>
        <property name="url" value="${Globals.Remote1.Url}" />
        <property name="username" value="${Globals.Remote1.UserName}"/>
        <property name="password" value="${Globals.Remote1.Password}"/>
    </bean>
    
    <!-- Remote2 CUBRID 데이타소스 -->
    <!-- 
    <bean id="dataSource-remote2" class="org.apache.commons.dbcp2.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${Globals.Remote2.DriverClassName}"/>
        <property name="url" value="${Globals.Remote2.Url}" />
        <property name="username" value="${Globals.Remote2.UserName}"/>
        <property name="password" value="${Globals.Remote2.Password}"/>
    </bean>
    -->

    <!-- 운영 MySQL용 데이타소스를 사용하는 JdbcTemplate -->
    <bean id="jdbcTemplateLocal" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource-local" />
    </bean>

    <!-- 스테이징 MySQL (Primary) 데이타소스를 사용하는 JdbcTemplate -->
    <bean id="jdbcTemplateStg" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource-stg" />
    </bean>
    
    <!-- Remote1 MySQL 데이타소스를 사용하는 JdbcTemplate -->
    <bean id="jdbcTemplateRemote1" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource-remote1" />
    </bean>
    
    <!-- Remote2 CUBRID 데이타소스를 사용하는 JdbcTemplate -->
	<!--     
    <bean id="jdbcTemplateRemote2" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource-remote2" />
    </bean>
 	-->

    <alias name="dataSource-stg" alias="dataSource"/>

    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager" lazy-init="true">
        <property name="dataSource" ref="dataSource" />
    </bean>

	<bean id="lobHandler" class="org.springframework.jdbc.support.lob.DefaultLobHandler" />

    <bean id="customEditorConfigurer" class="org.springframework.beans.factory.config.CustomEditorConfigurer">
        <property name="customEditors">
            <!-- SpEL을 사용하여 문자열 변환 없이 클래스 지정 -->
            <map>
                <entry key="#{T(int[])}"
                       value="#{T(org.springframework.batch.support.IntArrayPropertyEditor)}"/>
            </map>
        </property>
    </bean>

</beans>
